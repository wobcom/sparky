{ config, lib, pkgs, modulesPath, ... }:

with lib;

let cfg = config.profiles.sparky-metrics;
in {
  options.profiles.sparky-metrics = {
    enable = mkEnableOption (mdDoc "Enable the SPARKY metrics profile. Requires a configured tailnet on the host.");

    fqdn = mkOption {
      type = types.str;
      description = mdDoc ''
        The FQDN for the nginx vHost of SPARKY metrics.
      '';
    };

    webURL = mkOption {
      type = types.str;
      description = mdDoc ''
        URL of the SPARKY-Web server. Must not have a tailing slash.
      '';
    };

    metricsApiKeyFile = mkOption {
      type = types.path;
      description = mdDoc ''
        Path to a file containing the API key for the metrics host to update the bearer
        tokens for the probes from SPARKY-Web. Use a long, auto generated password for this.
      '';
    };

    probeSubnet = mkOption {
      type = types.str;
      description = mdDoc ''
        Subnet of the probes in the tailnet.
      '';
    };

    nginx = mkOption {
      type = types.submodule (
        recursiveUpdate
          (import (modulesPath + "/services/web-servers/nginx/vhost-options.nix") { inherit config lib; }) {}
      );
      default = { };
      example = literalExpression ''
        {
          # To enable encryption and let let's encrypt take care of certificate
          forceSSL = true;
          enableACME = true;
          # To set the SPARKY metrics virtualHost as the default virtualHost;
          default = true;
        }
      '';
      description = mdDoc ''
        With this option, you can customize the nginx virtualHost settings.
      '';
    };
  };

  config = mkIf cfg.enable {
    services.victoriametrics = {
      enable = true;
      extraOptions = [
        "-enableTCP6"
      ];
    };

    users.users.vmauth = {
      isSystemUser = true;
      group = "vmauth";
    };

    users.groups.vmauth = {};

    systemd.services.vmauth = {
      wantedBy = [ "multi-user.target" ];
      after = [ "network.target" ];
      description = "vmauth system service";
      serviceConfig = {
        User = "vmauth";
        Group = "vmauth";
        Type = "simple";
        Restart = "on-failure";
        RestartSec = 2;
        # config is generated by SPARKY-Web
        ExecStart = "${pkgs.victoriametrics}/bin/vmauth -auth.config=/var/lib/vmauth/vmauth.json";
      };
    };

    # state directory and files
    systemd.tmpfiles.rules = [
      "d /var/lib/vmauth                             0750 vmauth vmauth - -"
      "f /var/lib/vmauth/vmauth.json                 0600 vmauth vmauth - -"
    ];

    systemd.services.vmauth-config-update = {
      description = "vmauth config update";
      path = with pkgs; [ jq curl ];
      serviceConfig = {
        Type = "oneshot";
        WorkingDirectory = "/var/lib/vmauth";
        User = "vmauth";
        Group = "vmauth";
      };
      script = ''
        set -euo pipefail

        METRICS_API_KEY=$(cat ${cfg.metricsApiKeyFile} | tr -d '\n')
        CONFIG_JSON=$(curl -X POST -F metrics-api-key=$METRICS_API_KEY ${cfg.webURL}/api/v1/metrics-bearer-update)
        VMAUTH_CONFIG=$(echo $CONFIG_JSON | jq .data)

        echo $VMAUTH_CONFIG > /var/lib/vmauth/vmauth.json

        curl http://localhost:8427/-/reload
      '';
    };

    systemd.timers.vmauth-config-update = {
      description = "vmauth config update";
      wantedBy = [ "timers.target" ];
      timerConfig = {
        OnCalendar = "*:0/5"; # every 5 minutes
        AccuracySec = "1second";
      };
    };

    networking.firewall.allowedTCPPorts = [ 80 443 ];

    services.nginx = let
      proxyConfig = ''
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
      '';
    in {
      enable = true;
      virtualHosts."[${config.profiles.sparky-tailnet.ip}]" = {
        locations."/remote_write" = {
          proxyPass = "http://127.0.0.1:8427";
          extraConfig = ''
            allow ${cfg.probeSubnet};
            deny all;
            rewrite ^/remote_write(.*)$ / break;
            client_max_body_size 100M;
          '' + proxyConfig;
        };
      };
      virtualHosts."${cfg.fqdn}" = mkMerge [
        cfg.nginx
        {
          locations."/" = {
            proxyPass = "http://127.0.0.1:8428";
            extraConfig = ''
              deny ${cfg.probeSubnet};
            '' + proxyConfig;
          };
        }
      ];
    };
  };
}
